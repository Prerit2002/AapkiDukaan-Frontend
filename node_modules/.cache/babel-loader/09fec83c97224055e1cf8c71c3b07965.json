{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _warning = _interopRequireDefault(require(\"./warning\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\r\n * Provides the result of the PostCSS transformations.\r\n *\r\n * A Result instance is returned by {@link LazyResult#then}\r\n * or {@link Root#toResult} methods.\r\n *\r\n * @example\r\n * postcss([autoprefixer]).process(css).then(result => {\r\n *  console.log(result.css)\r\n * })\r\n *\r\n * @example\r\n * const result2 = postcss.parse(css).toResult()\r\n */\n\n\nvar Result = /*#__PURE__*/function () {\n  /**\r\n   * @param {Processor} processor Processor used for this transformation.\r\n   * @param {Root}      root      Root node after all transformations.\r\n   * @param {processOptions} opts Options from the {@link Processor#process}\r\n   *                              or {@link Root#toResult}.\r\n   */\n  function Result(processor, root, opts) {\n    /**\r\n     * The Processor instance used for this transformation.\r\n     *\r\n     * @type {Processor}\r\n     *\r\n     * @example\r\n     * for (const plugin of result.processor.plugins) {\r\n     *   if (plugin.postcssPlugin === 'postcss-bad') {\r\n     *     throw 'postcss-good is incompatible with postcss-bad'\r\n     *   }\r\n     * })\r\n     */\n    this.processor = processor;\n    /**\r\n     * Contains messages from plugins (e.g., warnings or custom messages).\r\n     * Each message should have type and plugin properties.\r\n     *\r\n     * @type {Message[]}\r\n     *\r\n     * @example\r\n     * postcss.plugin('postcss-min-browser', () => {\r\n     *   return (root, result) => {\r\n     *     const browsers = detectMinBrowsersByCanIUse(root)\r\n     *     result.messages.push({\r\n     *       type: 'min-browser',\r\n     *       plugin: 'postcss-min-browser',\r\n     *       browsers\r\n     *     })\r\n     *   }\r\n     * })\r\n     */\n\n    this.messages = [];\n    /**\r\n     * Root node after all transformations.\r\n     *\r\n     * @type {Root}\r\n     *\r\n     * @example\r\n     * root.toResult().root === root\r\n     */\n\n    this.root = root;\n    /**\r\n     * Options from the {@link Processor#process} or {@link Root#toResult} call\r\n     * that produced this Result instance.\r\n     *\r\n     * @type {processOptions}\r\n     *\r\n     * @example\r\n     * root.toResult(opts).opts === opts\r\n     */\n\n    this.opts = opts;\n    /**\r\n     * A CSS string representing of {@link Result#root}.\r\n     *\r\n     * @type {string}\r\n     *\r\n     * @example\r\n     * postcss.parse('a{}').toResult().css //=> \"a{}\"\r\n     */\n\n    this.css = undefined;\n    /**\r\n     * An instance of `SourceMapGenerator` class from the `source-map` library,\r\n     * representing changes to the {@link Result#root} instance.\r\n     *\r\n     * @type {SourceMapGenerator}\r\n     *\r\n     * @example\r\n     * result.map.toJSON() //=> { version: 3, file: 'a.css', â€¦ }\r\n     *\r\n     * @example\r\n     * if (result.map) {\r\n     *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())\r\n     * }\r\n     */\n\n    this.map = undefined;\n  }\n  /**\r\n   * Returns for @{link Result#css} content.\r\n   *\r\n   * @example\r\n   * result + '' === result.css\r\n   *\r\n   * @return {string} String representing of {@link Result#root}.\r\n   */\n\n\n  var _proto = Result.prototype;\n\n  _proto.toString = function toString() {\n    return this.css;\n  }\n  /**\r\n   * Creates an instance of {@link Warning} and adds it\r\n   * to {@link Result#messages}.\r\n   *\r\n   * @param {string} text        Warning message.\r\n   * @param {Object} [opts]      Warning options.\r\n   * @param {Node}   opts.node   CSS node that caused the warning.\r\n   * @param {string} opts.word   Word in CSS source that caused the warning.\r\n   * @param {number} opts.index  Index in CSS node string that caused\r\n   *                             the warning.\r\n   * @param {string} opts.plugin Name of the plugin that created\r\n   *                             this warning. {@link Result#warn} fills\r\n   *                             this property automatically.\r\n   *\r\n   * @return {Warning} Created warning.\r\n   */\n  ;\n\n  _proto.warn = function warn(text, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin;\n      }\n    }\n\n    var warning = new _warning.default(text, opts);\n    this.messages.push(warning);\n    return warning;\n  }\n  /**\r\n     * Returns warnings from plugins. Filters {@link Warning} instances\r\n     * from {@link Result#messages}.\r\n     *\r\n     * @example\r\n     * result.warnings().forEach(warn => {\r\n     *   console.warn(warn.toString())\r\n     * })\r\n     *\r\n     * @return {Warning[]} Warnings from plugins.\r\n     */\n  ;\n\n  _proto.warnings = function warnings() {\n    return this.messages.filter(function (i) {\n      return i.type === 'warning';\n    });\n  }\n  /**\r\n   * An alias for the {@link Result#css} property.\r\n   * Use it with syntaxes that generate non-CSS output.\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @example\r\n   * result.css === result.content\r\n   */\n  ;\n\n  _createClass(Result, [{\n    key: \"content\",\n    get: function get() {\n      return this.css;\n    }\n  }]);\n\n  return Result;\n}();\n\nvar _default = Result;\n/**\r\n * @typedef  {object} Message\r\n * @property {string} type   Message type.\r\n * @property {string} plugin Source PostCSS plugin name.\r\n */\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["result.es6"],"names":["Result","toString","warn","opts","warning","Warning","warnings","i"],"mappings":";;;;;AAAA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;IAcMA,M;AACJ;;;;;;AAMA,WAAA,MAAA,CAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAoC;AAClC;;;;;;;;;;;;AAYA,SAAA,SAAA,GAAA,SAAA;AACA;;;;;;;;;;;;;;;;;;;AAkBA,SAAA,QAAA,GAAA,EAAA;AACA;;;;;;;;;AAQA,SAAA,IAAA,GAAA,IAAA;AACA;;;;;;;;;;AASA,SAAA,IAAA,GAAA,IAAA;AACA;;;;;;;;;AAQA,SAAA,GAAA,GAAA,SAAA;AACA;;;;;;;;;;;;;;;AAcA,SAAA,GAAA,GAAA,SAAA;AACD;AAED;;;;;;;;;;;;SAQAC,Q,GAAAA,SAAAA,QAAAA,GAAY;AACV,WAAO,KAAP,GAAA;AACD;AAED;;;;;;;;;;;;;;;;;;SAgBAC,I,GAAAA,SAAAA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAwB;AAAA,QAAZC,IAAY,KAAA,KAAA,CAAA,EAAA;AAAZA,MAAAA,IAAY,GAAL,EAAPA;AAAY;;AACtB,QAAI,CAACA,IAAI,CAAT,MAAA,EAAkB;AAChB,UAAI,KAAA,UAAA,IAAmB,KAAA,UAAA,CAAvB,aAAA,EAAsD;AACpDA,QAAAA,IAAI,CAAJA,MAAAA,GAAc,KAAA,UAAA,CAAdA,aAAAA;AACD;AACF;;AAED,QAAIC,OAAO,GAAG,IAAIC,QAAAA,CAAJ,OAAA,CAAA,IAAA,EAAd,IAAc,CAAd;AACA,SAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AAEA,WAAA,OAAA;AACD;AAED;;;;;;;;;;;;;SAWAC,Q,GAAAA,SAAAA,QAAAA,GAAY;AACV,WAAO,KAAA,QAAA,CAAA,MAAA,CAAqB,UAAA,CAAA,EAAC;AAAA,aAAIC,CAAC,CAADA,IAAAA,KAAJ,SAAA;AAA7B,KAAO,CAAP;AACD;AAED;;;;;;;;;;;;;wBASe;AACb,aAAO,KAAP,GAAA;AACD;;;;;;eAGYP,M;AAEf","sourcesContent":["import Warning from './warning'\n\n/**\n * Provides the result of the PostCSS transformations.\n *\n * A Result instance is returned by {@link LazyResult#then}\n * or {@link Root#toResult} methods.\n *\n * @example\n * postcss([autoprefixer]).process(css).then(result => {\n *  console.log(result.css)\n * })\n *\n * @example\n * const result2 = postcss.parse(css).toResult()\n */\nclass Result {\n  /**\n   * @param {Processor} processor Processor used for this transformation.\n   * @param {Root}      root      Root node after all transformations.\n   * @param {processOptions} opts Options from the {@link Processor#process}\n   *                              or {@link Root#toResult}.\n   */\n  constructor (processor, root, opts) {\n    /**\n     * The Processor instance used for this transformation.\n     *\n     * @type {Processor}\n     *\n     * @example\n     * for (const plugin of result.processor.plugins) {\n     *   if (plugin.postcssPlugin === 'postcss-bad') {\n     *     throw 'postcss-good is incompatible with postcss-bad'\n     *   }\n     * })\n     */\n    this.processor = processor\n    /**\n     * Contains messages from plugins (e.g., warnings or custom messages).\n     * Each message should have type and plugin properties.\n     *\n     * @type {Message[]}\n     *\n     * @example\n     * postcss.plugin('postcss-min-browser', () => {\n     *   return (root, result) => {\n     *     const browsers = detectMinBrowsersByCanIUse(root)\n     *     result.messages.push({\n     *       type: 'min-browser',\n     *       plugin: 'postcss-min-browser',\n     *       browsers\n     *     })\n     *   }\n     * })\n     */\n    this.messages = []\n    /**\n     * Root node after all transformations.\n     *\n     * @type {Root}\n     *\n     * @example\n     * root.toResult().root === root\n     */\n    this.root = root\n    /**\n     * Options from the {@link Processor#process} or {@link Root#toResult} call\n     * that produced this Result instance.\n     *\n     * @type {processOptions}\n     *\n     * @example\n     * root.toResult(opts).opts === opts\n     */\n    this.opts = opts\n    /**\n     * A CSS string representing of {@link Result#root}.\n     *\n     * @type {string}\n     *\n     * @example\n     * postcss.parse('a{}').toResult().css //=> \"a{}\"\n     */\n    this.css = undefined\n    /**\n     * An instance of `SourceMapGenerator` class from the `source-map` library,\n     * representing changes to the {@link Result#root} instance.\n     *\n     * @type {SourceMapGenerator}\n     *\n     * @example\n     * result.map.toJSON() //=> { version: 3, file: 'a.css', â€¦ }\n     *\n     * @example\n     * if (result.map) {\n     *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())\n     * }\n     */\n    this.map = undefined\n  }\n\n  /**\n   * Returns for @{link Result#css} content.\n   *\n   * @example\n   * result + '' === result.css\n   *\n   * @return {string} String representing of {@link Result#root}.\n   */\n  toString () {\n    return this.css\n  }\n\n  /**\n   * Creates an instance of {@link Warning} and adds it\n   * to {@link Result#messages}.\n   *\n   * @param {string} text        Warning message.\n   * @param {Object} [opts]      Warning options.\n   * @param {Node}   opts.node   CSS node that caused the warning.\n   * @param {string} opts.word   Word in CSS source that caused the warning.\n   * @param {number} opts.index  Index in CSS node string that caused\n   *                             the warning.\n   * @param {string} opts.plugin Name of the plugin that created\n   *                             this warning. {@link Result#warn} fills\n   *                             this property automatically.\n   *\n   * @return {Warning} Created warning.\n   */\n  warn (text, opts = { }) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  /**\n     * Returns warnings from plugins. Filters {@link Warning} instances\n     * from {@link Result#messages}.\n     *\n     * @example\n     * result.warnings().forEach(warn => {\n     *   console.warn(warn.toString())\n     * })\n     *\n     * @return {Warning[]} Warnings from plugins.\n     */\n  warnings () {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  /**\n   * An alias for the {@link Result#css} property.\n   * Use it with syntaxes that generate non-CSS output.\n   *\n   * @type {string}\n   *\n   * @example\n   * result.css === result.content\n   */\n  get content () {\n    return this.css\n  }\n}\n\nexport default Result\n\n/**\n * @typedef  {object} Message\n * @property {string} type   Message type.\n * @property {string} plugin Source PostCSS plugin name.\n */\n"]},"metadata":{},"sourceType":"script"}