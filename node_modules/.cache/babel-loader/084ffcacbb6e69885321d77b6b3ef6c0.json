{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _node = _interopRequireDefault(require(\"./node\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n/**\r\n * Represents a CSS declaration.\r\n *\r\n * @extends Node\r\n *\r\n * @example\r\n * const root = postcss.parse('a { color: black }')\r\n * const decl = root.first.first\r\n * decl.type       //=> 'decl'\r\n * decl.toString() //=> ' color: black'\r\n */\n\n\nvar Declaration = /*#__PURE__*/function (_Node) {\n  _inheritsLoose(Declaration, _Node);\n\n  function Declaration(defaults) {\n    var _this;\n\n    _this = _Node.call(this, defaults) || this;\n    _this.type = 'decl';\n    return _this;\n  }\n  /**\r\n   * @memberof Declaration#\r\n   * @member {string} prop The declaration’s property name.\r\n   *\r\n   * @example\r\n   * const root = postcss.parse('a { color: black }')\r\n   * const decl = root.first.first\r\n   * decl.prop //=> 'color'\r\n   */\n\n  /**\r\n   * @memberof Declaration#\r\n   * @member {string} value The declaration’s value.\r\n   *\r\n   * @example\r\n   * const root = postcss.parse('a { color: black }')\r\n   * const decl = root.first.first\r\n   * decl.value //=> 'black'\r\n   */\n\n  /**\r\n   * @memberof Declaration#\r\n   * @member {boolean} important `true` if the declaration\r\n   *                             has an !important annotation.\r\n   *\r\n   * @example\r\n   * const root = postcss.parse('a { color: black !important; color: red }')\r\n   * root.first.first.important //=> true\r\n   * root.first.last.important  //=> undefined\r\n   */\n\n  /**\r\n   * @memberof Declaration#\r\n   * @member {object} raws Information to generate byte-to-byte equal\r\n   *                       node string as it was in the origin input.\r\n   *\r\n   * Every parser saves its own properties,\r\n   * but the default CSS parser uses:\r\n   *\r\n   * * `before`: the space symbols before the node. It also stores `*`\r\n   *   and `_` symbols before the declaration (IE hack).\r\n   * * `between`: the symbols between the property and value\r\n   *   for declarations.\r\n   * * `important`: the content of the important statement,\r\n   *   if it is not just `!important`.\r\n   *\r\n   * PostCSS cleans declaration from comments and extra spaces,\r\n   * but it stores origin content in raws properties.\r\n   * As such, if you don’t change a declaration’s value,\r\n   * PostCSS will use the raw value with comments.\r\n   *\r\n   * @example\r\n   * const root = postcss.parse('a {\\n  color:black\\n}')\r\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\r\n   */\n\n\n  return Declaration;\n}(_node.default);\n\nvar _default = Declaration;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["declaration.es6"],"names":["Declaration","Node"],"mappings":";;;;;AAAA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;IAWMA,W;;;AACJ,WAAA,WAAA,CAAA,QAAA,EAAuB;AAAA,QAAA,KAAA;;AACrB,IAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,IAAA,EAAA,QAAA,KAAA,IAAA;AACA,IAAA,KAAA,CAAA,IAAA,GAAA,MAAA;AAFqB,WAAA,KAAA;AAGtB;AAED;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;EArCwBC,KAAAA,CAAAA,O;;eA+DXD,W","sourcesContent":["import Node from './node'\n\n/**\n * Represents a CSS declaration.\n *\n * @extends Node\n *\n * @example\n * const root = postcss.parse('a { color: black }')\n * const decl = root.first.first\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n */\nclass Declaration extends Node {\n  constructor (defaults) {\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  /**\n   * @memberof Declaration#\n   * @member {string} prop The declaration’s property name.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   * decl.prop //=> 'color'\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {string} value The declaration’s value.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   * decl.value //=> 'black'\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {boolean} important `true` if the declaration\n   *                             has an !important annotation.\n   *\n   * @example\n   * const root = postcss.parse('a { color: black !important; color: red }')\n   * root.first.first.important //=> true\n   * root.first.last.important  //=> undefined\n   */\n\n  /**\n   * @memberof Declaration#\n   * @member {object} raws Information to generate byte-to-byte equal\n   *                       node string as it was in the origin input.\n   *\n   * Every parser saves its own properties,\n   * but the default CSS parser uses:\n   *\n   * * `before`: the space symbols before the node. It also stores `*`\n   *   and `_` symbols before the declaration (IE hack).\n   * * `between`: the symbols between the property and value\n   *   for declarations.\n   * * `important`: the content of the important statement,\n   *   if it is not just `!important`.\n   *\n   * PostCSS cleans declaration from comments and extra spaces,\n   * but it stores origin content in raws properties.\n   * As such, if you don’t change a declaration’s value,\n   * PostCSS will use the raw value with comments.\n   *\n   * @example\n   * const root = postcss.parse('a {\\n  color:black\\n}')\n   * root.first.first.raws //=> { before: '\\n  ', between: ':' }\n   */\n}\n\nexport default Declaration\n"]},"metadata":{},"sourceType":"script"}